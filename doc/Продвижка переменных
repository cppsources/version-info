1. 
1.1 Если проект состоит из множества подпроектов, т.е. главный pro-файл имеет следующую структуру:

TEMPLATE = SUBDIRS

SUBDIRS += \
    src

myVariable = value # определяется переменная (value не число !)

и в нем определяется собственная переменная, например myVariable,
то для продвижки ее значения из главного pro-файла в pro/pri файлы подпроектов,
необходимо записать ее значение в .qmake.cache.

exists($$OUT_PWD/.qmake.cache) { # пересоздавать .qmake.cache при каждом qmake
    unix: system(rm -rf $$OUT_PWD/.qmake.cache)
    win32: system(DEL /Q /F $$OUT_PWD/.qmake.cache) # TODO: Не протестировано
}

!infile($$OUT_PWD/.qmake.cache, top_srcdir) { # путь к главному pro-файлу проекта
    system("echo top_srcdir = $$PWD >> $$OUT_PWD/.qmake.cache")
}

!infile($$OUT_PWD/.qmake.cache, top_builddir) { # путь к директории сборки
    system("echo top_builddir = $$OUT_PWD >> $$OUT_PWD/.qmake.cache")
}

!infile($$OUT_PWD/.qmake.cache, myVariable) { # собственная переменная
    system("echo myVariable = value >> $$OUT_PWD/.qmake.cache")
}

которое потом можно считать в pro/pri файле любого подпроекта, например так:
message($$myVariable)

1.2 Если необходимо использовать это значение в файлах исходного кода какого-либо подпроекта,
то необходимо его продвинуть из pro-файла, являющегося главным для этого подпроекта, в файлы исходного кода этого проекта, например:
DEFINES += \
    myVariable=value

а затем использовать, например так: qDebug() << myVariable, или если продвинуть таким образом:
DEFINES += \
    value myVariable=value
то можно использовать не только так qDebug() << myVariable, но и так:
#if myVariable == value
    qDebug() << 1
#else 
    qDebug() << 2
#endif

2. Если проект не включает в себя подпроектов, то процедуры описываемую в п. 1 можно упростить, то есть не использовать .qmake.cache, а сделать как в п. 1.2
